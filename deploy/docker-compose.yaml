services:
  mongo1:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"
    networks:
      - womm_net

  mongo2:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"
    networks:
      - womm_net

  mongo3:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"
    networks:
      - womm_net
  
  rabbit-2:
    image: rabbitmq:4.0.3-management
    container_name: rabbit-2
    ports:
      - "15672:15672"
      - "5672:5672"
      - "5673:5673"
    volumes:
      - C:\Dev\docker\rabbitmq:/var/lib/rabbitmq
      - type: bind
        source: ./rabbit/rabbitmq.config
        target: /etc/rabbitmq/rabbitmq.config
      - type: bind
        source: ./rabbit/rabbitmq-defs.json
        target: /etc/rabbitmq/rabbitmq-defs.json
    networks:
      - womm_net
    restart: always

  minio-2:
    image: quay.io/minio/minio
    container_name: minio-2
    environment:
      - MINIO_ROOT_USER=minioRootUser
      - MINIO_ROOT_PASSWORD=miniominioRootUser$
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - C:\Dev\docker\minio:/data 
    networks:
      - womm_net
    restart: always

  worker-2:
    image: womm-worker
    container_name: worker-2
    ports:
      - "18002:18002"
    build:
      context: ../worker
    networks:
      - womm_net
    restart: always
    depends_on: 
      - rabbit-2
      - minio-2
    volumes:
      - .\appsettings.json:/app/appsettings.json

  task-manager-2:
    image: womm-task-manager
    container_name: task-manager-2
    build:
      context: ../task-manager
      target: final
    networks:
      - womm_net
    ports:
      - "3000:3000"
    restart: always
    depends_on: 
      - rabbit-2
      - minio-2
      - mongo1
      - mongo2
      - mongo3
    environment:
      MONGO_CONNECTION: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/mydb?replicaSet=rs0
      RABBITMQ_URL: amqp://rabbit-2:5672
      NODE_ENV: prod

  api-2:
    image: womm-api
    container_name: api
    ports:
      - "80:3000"
    networks:
      - womm_net
    build:
      context: ..
      target: final
    restart: always
    depends_on: 
      - rabbit-2
      - minio-2
      - mongo1
      - mongo2
      - mongo3
      - task-manager-2
    environment:
      MONGO_CONNECTION: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/mydb?replicaSet=rs0
      RABBITMQ_URL: amqp://rabbit-2:5672
      NODE_ENV: prod
      S3_ENDPOINT: http://minio-2:9000
      S3_ACCESS_KEY_ID: minioRootUser
      S3_SECRET_ACCESS_KEY: miniominioRootUser$
      
networks:
  womm_net:
    driver: bridge

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config:
  minio_data: